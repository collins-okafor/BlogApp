// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

namespace api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221014083652_AddRefreshTokenTable")]
    partial class AddRefreshTokenTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("api.Model.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Alfred Reilly"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dexter Raynor"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Roman Lind"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Lucas Mann"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Lynette Wiegand"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Josefina Wolff"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Jake Harvey"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Kenny Olson"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Elmer Nienow"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Mabel Barrows"
                        });
                });

            modelBuilder.Entity("api.Model.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("BlogPosts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 3,
                            Body = "Iste nihil similique molestiae dignissimos ut.\nTempore esse voluptatibus recusandae.\nUt nesciunt molestiae quos id suscipit voluptatibus consequatur quae.\nFugit placeat nesciunt quis aut.\nConsectetur voluptas tempore eos aut.\nRerum autem quibusdam architecto iste placeat vel nobis qui.\nCupiditate consequatur minima.\nTempora quibusdam soluta illo aut necessitatibus qui.\nEnim qui enim architecto.\nSaepe atque est enim architecto a.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 254, DateTimeKind.Local).AddTicks(8885),
                            Title = "Quis iure explicabo cumque."
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            Body = "Ut et ea tempora architecto tempora ut explicabo dolore.\nReprehenderit vitae et.\nAsperiores quia cumque et aut et atque veniam.\nVelit quos qui ducimus pariatur dicta.\nQuia aspernatur voluptatem ad debitis.\nExplicabo a ut mollitia et reiciendis.\nFugiat sunt error eligendi.\nDelectus et in maiores est.\nExercitationem tenetur rerum neque minus nisi omnis et.\nSapiente rerum exercitationem.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 257, DateTimeKind.Local).AddTicks(253),
                            Title = "Ad illo optio provident."
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 10,
                            Body = "Eum vel debitis quas veritatis et aut non.\nConsequuntur aut eius.\nAmet autem quam voluptatibus molestiae excepturi non modi.\nIllum nihil ut quaerat hic quibusdam harum aliquid qui et.\nFugiat nesciunt nisi at temporibus necessitatibus exercitationem ab.\nCorporis et et temporibus aliquam optio et sint ea.\nVoluptatem corporis occaecati itaque natus blanditiis sed et nihil ipsam.\nEst tempore qui qui officiis.\nDoloremque error consectetur.\nEius debitis esse.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 257, DateTimeKind.Local).AddTicks(1432),
                            Title = "Laboriosam officiis sed incidunt."
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 6,
                            Body = "Officiis fugit doloribus quas velit.\nIpsam modi repellendus qui aliquam.\nDeserunt id molestias.\nReiciendis dolorem quia vel libero necessitatibus hic.\nRepudiandae et nihil aut.\nQui et ex quibusdam qui.\nSit optio ipsum ipsa magnam iste.\nDolore ipsum recusandae rerum et qui voluptates ut amet.\nUt fuga qui maiores dolorem qui officia est.\nNumquam officiis reprehenderit maxime ut nostrum eos ullam quia et.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 257, DateTimeKind.Local).AddTicks(1910),
                            Title = "Dolorem aut dolor consequatur."
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 9,
                            Body = "Dolor ut ut quia minima consectetur vel quia.\nEum ipsum accusamus.\nSit officiis culpa iusto laboriosam nisi.\nVero nihil aperiam expedita corrupti voluptas qui quae vel sint.\nAut quisquam nisi.\nOfficia dolorum iusto harum voluptatem dolores.\nMinus sint sed enim.\nNemo ab tempora est dolorum voluptatum recusandae temporibus ex.\nEnim nobis odio est.\nDolorem quos quis consequatur voluptatem.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 257, DateTimeKind.Local).AddTicks(2307),
                            Title = "Quia a qui et."
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 2,
                            Body = "Voluptatem iusto tempore est occaecati ut eius repellat.\nRepellat voluptatem eum reprehenderit voluptas.\nOmnis doloremque reprehenderit enim facere consectetur esse neque ea.\nRatione placeat quia minus.\nVoluptas ut est repudiandae nesciunt dolores sed nam.\nEst laudantium odio sit suscipit cum nam reiciendis.\nCommodi iste animi.\nEst dolore sint et ad ipsam ducimus quis temporibus aspernatur.\nMollitia incidunt aut eos deleniti.\nNostrum iusto commodi quo.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 257, DateTimeKind.Local).AddTicks(2684),
                            Title = "Harum veniam a repellat."
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 6,
                            Body = "In ipsum impedit possimus quia beatae officiis dolorum.\nIn magnam modi aut eius nemo.\nConsequatur dolor minus aut autem non et accusamus architecto quia.\nDolor fugit a omnis.\nDucimus harum accusamus sed beatae laboriosam dicta occaecati ex.\nEligendi beatae sint quasi harum.\nEa omnis et sunt.\nQuisquam rerum ab libero quo.\nIllo voluptas optio quas corrupti quidem et est.\nUt aut et accusantium.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 257, DateTimeKind.Local).AddTicks(3079),
                            Title = "Quis facere vitae dolorem."
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 1,
                            Body = "Tenetur consequatur corrupti sunt est natus.\nConsectetur rem qui.\nQui sed labore expedita doloremque cum distinctio possimus.\nOdio corrupti exercitationem laudantium.\nCorporis est eveniet deleniti dolores aut ex numquam dolore.\nSoluta similique facere et rerum qui ducimus a quae molestiae.\nSimilique nam consequatur inventore sed dicta est.\nVoluptatibus totam impedit accusantium nostrum rem voluptates dolores.\nLaboriosam facere reprehenderit id quis ex reiciendis laudantium.\nId consequatur facere asperiores provident magnam aperiam ad minus maiores.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 257, DateTimeKind.Local).AddTicks(3469),
                            Title = "Numquam placeat provident fugiat."
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 6,
                            Body = "Ut quam ut perspiciatis laudantium qui aperiam.\nId et nostrum eaque et.\nNemo reprehenderit mollitia laborum ut.\nDebitis maiores itaque blanditiis doloribus sit quod molestiae id quis.\nEt consequatur sit sit itaque aut et laudantium.\nEst iusto aliquam repudiandae sapiente.\nEx ducimus cum eos dolorem maiores ut et quo veniam.\nExcepturi omnis dignissimos quo aut impedit.\nDebitis nihil tempora ut voluptatem quis.\nTempore ratione inventore amet odio qui.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 257, DateTimeKind.Local).AddTicks(3929),
                            Title = "Quam mollitia rerum culpa."
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 1,
                            Body = "Totam praesentium facere voluptas consectetur.\nId blanditiis dolores consequatur sit.\nNam est aut aperiam sed est qui.\nCorporis possimus sequi quo.\nEt enim omnis blanditiis sit error.\nQuam eos et doloribus quia aspernatur eaque mollitia cupiditate.\nRerum nemo magni atque cupiditate quo et doloribus sapiente eius.\nAut rerum impedit nemo.\nNulla omnis aperiam amet repellat deleniti aut ut sequi aut.\nIllum voluptates odio minus vero distinctio.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 257, DateTimeKind.Local).AddTicks(4376),
                            Title = "Dolores doloribus nam nostrum."
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = 4,
                            Body = "Iste et totam illo ut sunt voluptatem repudiandae sed soluta.\nMagnam ad natus laboriosam.\nVoluptate quas saepe voluptas quisquam ut odit beatae occaecati atque.\nDignissimos natus quo praesentium quia.\nAt deleniti iste provident nihil blanditiis nam quo necessitatibus.\nDolores cumque amet praesentium ullam voluptatem rem laudantium nisi vel.\nAmet quia cupiditate iure provident et eius officiis.\nCumque eius alias ea quam.\nRepellendus iure voluptatibus.\nIncidunt corrupti eum.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 257, DateTimeKind.Local).AddTicks(4839),
                            Title = "Officiis nulla impedit repellat."
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = 3,
                            Body = "Quia sunt quis.\nQui quia libero.\nDoloremque qui necessitatibus deserunt.\nSapiente sed et sint cumque dolor.\nEius sed vitae.\nUllam qui amet ea aperiam iste.\nVelit voluptas neque.\nUt sit aut est incidunt facere molestiae facere dolore.\nQui repellendus cupiditate.\nQuae ab cum iste maiores.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 257, DateTimeKind.Local).AddTicks(5241),
                            Title = "Ut autem suscipit accusantium."
                        },
                        new
                        {
                            Id = 13,
                            AuthorId = 9,
                            Body = "Doloribus enim quia voluptatum magni eligendi facere veniam non.\nRepudiandae illum explicabo omnis veniam.\nDolor quo iure nulla quibusdam.\nVeritatis doloribus quas suscipit facilis at voluptas dolorem.\nOdio minima quibusdam labore dignissimos.\nMinima fugit ea cumque quas ipsam accusantium dolores ut.\nAlias cumque perspiciatis aut dolorem quas reiciendis.\nSit dolore dolores.\nAutem ab ut tenetur ipsa consequatur rem sed exercitationem enim.\nCorrupti quas quisquam voluptatibus qui exercitationem nisi eaque at.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 257, DateTimeKind.Local).AddTicks(5548),
                            Title = "Qui consequatur necessitatibus qui."
                        },
                        new
                        {
                            Id = 14,
                            AuthorId = 3,
                            Body = "Explicabo itaque corporis repellendus voluptates.\nTempore nemo quia ex.\nOmnis ad sit distinctio cumque quis eligendi eos illo.\nDucimus occaecati fugiat porro maiores.\nMinima nihil ipsa velit.\nDolorem cum repudiandae provident incidunt excepturi in facilis illum.\nIn et nisi maxime.\nSit adipisci similique.\nRerum quis qui veritatis facilis quam.\nEt molestiae maiores reprehenderit animi veniam.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 257, DateTimeKind.Local).AddTicks(5966),
                            Title = "Facere rerum voluptatem repellendus."
                        },
                        new
                        {
                            Id = 15,
                            AuthorId = 10,
                            Body = "Totam est exercitationem numquam.\nAut quae necessitatibus quos.\nRepudiandae consectetur vitae dolores sunt laudantium praesentium odio et ut.\nOmnis ducimus voluptatum.\nNihil mollitia sed nobis nostrum commodi voluptatum repudiandae.\nAut optio et.\nCorrupti sapiente animi.\nReiciendis sunt perferendis autem nemo totam impedit.\nOfficia earum reiciendis quo aut impedit.\nQui iste vel quas non.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 257, DateTimeKind.Local).AddTicks(6314),
                            Title = "Ab eum mollitia odit."
                        },
                        new
                        {
                            Id = 16,
                            AuthorId = 3,
                            Body = "Aperiam debitis vel.\nHic et libero qui dolor ea.\nEt fugit magni voluptate quia nihil.\nDolores architecto illo reprehenderit quis fugiat.\nCum blanditiis libero voluptas dolor deleniti in.\nNostrum et fugiat libero velit doloribus voluptas.\nMolestiae molestiae delectus ea.\nOptio autem occaecati repellat quos consectetur itaque quia.\nRerum quas reiciendis accusamus ad adipisci repellat quaerat repellat aut.\nUt dolorem optio in ut quas et ipsum ut et.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 257, DateTimeKind.Local).AddTicks(6665),
                            Title = "Velit laborum iusto minima."
                        },
                        new
                        {
                            Id = 17,
                            AuthorId = 5,
                            Body = "Voluptatem voluptas quis.\nQuidem enim sit autem voluptas.\nSit quo magni ipsum dolorem molestiae dicta voluptatum.\nOfficiis cum earum praesentium maiores.\nAssumenda corporis sit quia aspernatur quas ipsa ullam fugit.\nRecusandae impedit deserunt dolore eaque dolores et magnam pariatur.\nPorro eaque minus praesentium.\nQuia alias corrupti aut ea quia et.\nCupiditate accusamus aut repellat et.\nSit nostrum esse sit.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 257, DateTimeKind.Local).AddTicks(7063),
                            Title = "Voluptate voluptatum eum reiciendis."
                        },
                        new
                        {
                            Id = 18,
                            AuthorId = 4,
                            Body = "Vel est eligendi est vel.\nQui similique accusamus.\nOmnis quas omnis velit impedit rerum et velit.\nVel doloremque dolores.\nVoluptatem libero rerum corporis voluptatem.\nTempora voluptas eum est sit est.\nSint quaerat corrupti voluptatum eos odio consequuntur maiores.\nCum id numquam nemo nobis ipsum.\nNihil pariatur ad aut atque libero earum non maxime.\nNeque facilis nemo rerum minus quis voluptatum beatae.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 257, DateTimeKind.Local).AddTicks(7436),
                            Title = "Ut numquam quos tempora."
                        },
                        new
                        {
                            Id = 19,
                            AuthorId = 2,
                            Body = "Quis corporis sunt asperiores ratione dicta porro.\nInventore occaecati voluptate molestiae et voluptas ratione pariatur.\nIste minus et ad atque.\nQuas earum consequatur quod tempora error ea aut.\nLaborum nobis excepturi sit aspernatur rerum repellendus distinctio doloribus.\nQui temporibus ut consequatur laudantium harum.\nEnim quos consequatur eos aut ipsam necessitatibus fuga et ab.\nNisi corrupti nesciunt optio quidem culpa enim modi voluptas.\nFacere quis est architecto dignissimos fugiat eveniet necessitatibus delectus dolores.\nAut ullam nostrum accusamus sint ut aut quis fuga iste.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 257, DateTimeKind.Local).AddTicks(7811),
                            Title = "Consequatur et deserunt labore."
                        },
                        new
                        {
                            Id = 20,
                            AuthorId = 1,
                            Body = "Necessitatibus voluptatem sapiente dolores et.\nSapiente occaecati sed deserunt repellendus.\nDeleniti doloribus minus aut repudiandae.\nUt consectetur et dolorem sed est molestias pariatur cumque velit.\nRem est possimus earum unde consequatur quod alias.\nDistinctio et suscipit assumenda placeat molestiae sit dignissimos.\nHarum qui non voluptatibus quia vitae enim quam veritatis doloremque.\nDoloribus reprehenderit id omnis et.\nQui doloremque quam recusandae voluptatibus asperiores aspernatur ad.\nEt vero explicabo beatae.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 257, DateTimeKind.Local).AddTicks(8281),
                            Title = "Eveniet alias ipsam et."
                        },
                        new
                        {
                            Id = 21,
                            AuthorId = 2,
                            Body = "Autem quos est tempore harum consequuntur rerum.\nEt est ut velit dolor ut aut odit.\nAccusantium a est dolorem.\nNihil et et blanditiis quia maiores quo molestiae molestiae.\nSed sapiente consequatur nesciunt ipsum ex.\nAut eaque quis dignissimos et tenetur ut architecto consequuntur.\nSunt ad aperiam repellat quam voluptas sapiente repellendus maxime voluptatem.\nAut sapiente accusamus qui.\nEum distinctio illum delectus rerum recusandae quibusdam labore.\nLaborum sed eum beatae.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 257, DateTimeKind.Local).AddTicks(8703),
                            Title = "Molestiae veritatis a quasi."
                        },
                        new
                        {
                            Id = 22,
                            AuthorId = 10,
                            Body = "Et necessitatibus iusto sed velit ipsa quis molestiae.\nEst alias architecto esse porro.\nQuia in quaerat neque accusantium sequi voluptatum quibusdam pariatur aut.\nCulpa impedit autem id.\nId hic quia beatae fugiat qui ut dolorum et.\nQuas laudantium et voluptatem ut quia libero.\nEum voluptas sed eaque.\nDeserunt quia explicabo officia ipsam aut laudantium nam quidem minus.\nIn quia exercitationem rerum quasi est aperiam rerum labore.\nEst perferendis dolorem cumque ut odit.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 257, DateTimeKind.Local).AddTicks(9112),
                            Title = "Esse vel velit aut."
                        },
                        new
                        {
                            Id = 23,
                            AuthorId = 10,
                            Body = "Delectus provident ut id consequatur tempora facilis.\nRepudiandae accusamus minus illum placeat esse.\nDoloremque aut odit consequatur deleniti quibusdam provident earum neque.\nNecessitatibus quae et iste magni tempore ut magni fugiat nesciunt.\nId suscipit sint aut asperiores repellendus ut dolor veniam.\nHic at minima aut et.\nHic velit assumenda iusto officia quod consequatur sint dolor.\nUt repellendus adipisci omnis nobis sint quaerat veritatis nostrum.\nAmet consequatur corrupti perferendis doloribus neque debitis culpa itaque.\nOfficia tempore optio illum.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 257, DateTimeKind.Local).AddTicks(9540),
                            Title = "Sed sapiente omnis cum."
                        },
                        new
                        {
                            Id = 24,
                            AuthorId = 1,
                            Body = "Non alias fuga numquam aut possimus qui cupiditate distinctio doloremque.\nEius deserunt libero libero rerum quo possimus.\nMolestiae eos tempora reiciendis maiores consectetur.\nDicta autem quod facere.\nSed rerum exercitationem labore amet vel enim magni ut.\nEx et voluptates animi quis beatae accusantium.\nArchitecto modi nemo minima.\nDolores corporis voluptatem rerum voluptatem et libero quia.\nVoluptates quia inventore sit ullam molestiae atque error odio.\nQuia nulla molestias corporis quasi eum qui voluptatem.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 257, DateTimeKind.Local).AddTicks(9991),
                            Title = "Recusandae veritatis quisquam quia."
                        },
                        new
                        {
                            Id = 25,
                            AuthorId = 1,
                            Body = "Eos nesciunt itaque dolorem quod.\nVoluptatum similique autem in.\nMinus perspiciatis eaque.\nAnimi nam excepturi dolor soluta quasi ut et repellat.\nQuaerat sed quas est reiciendis fugit vel et quibusdam consectetur.\nQuos voluptatem qui consectetur.\nRerum rem recusandae exercitationem.\nQuo dolor consequatur laudantium natus.\nMaxime et consectetur ut.\nEarum numquam atque quae ut a qui.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 258, DateTimeKind.Local).AddTicks(454),
                            Title = "Tempora nam non unde."
                        },
                        new
                        {
                            Id = 26,
                            AuthorId = 5,
                            Body = "Odit ut est deserunt non molestiae molestiae optio.\nLaborum quam quam eos ratione esse sapiente harum.\nEst a est omnis aut laboriosam ratione sit nobis.\nRem distinctio ut.\nRecusandae est ex.\nTotam sequi suscipit omnis.\nFugiat labore id et fuga fugiat vel reiciendis dolores.\nLaboriosam eos necessitatibus aperiam iste dolore ut dignissimos ut maxime.\nModi ipsa autem voluptas corrupti.\nTemporibus sed dolores deleniti et nulla.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 258, DateTimeKind.Local).AddTicks(817),
                            Title = "Harum aut maxime nulla."
                        },
                        new
                        {
                            Id = 27,
                            AuthorId = 2,
                            Body = "Ut accusamus aspernatur reiciendis nam eveniet tenetur.\nEst quibusdam delectus.\nQuo maiores sit.\nLaborum velit tempora id dolores quam.\nEst alias occaecati.\nNostrum id quaerat et placeat architecto sint repellat officiis aliquam.\nAutem deleniti quis dignissimos.\nDoloribus labore vel voluptas dignissimos dolorem optio neque.\nEnim sed iure.\nNulla quia aut ratione doloribus nam nemo et iste numquam.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 258, DateTimeKind.Local).AddTicks(1211),
                            Title = "Est enim et ad."
                        },
                        new
                        {
                            Id = 28,
                            AuthorId = 1,
                            Body = "Dolorem placeat commodi eligendi optio.\nSed fuga facere.\nLaudantium ipsa aspernatur magni voluptatum sed.\nQuasi doloremque non enim tempora corrupti impedit.\nNostrum iusto voluptatem suscipit.\nBlanditiis soluta dolores quibusdam nostrum cupiditate quia eligendi incidunt vel.\nAliquid qui cupiditate velit ut sit nihil id molestias.\nSint fugit enim explicabo mollitia.\nExpedita natus ea mollitia excepturi.\nDolor consequatur dolor perspiciatis corporis.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 258, DateTimeKind.Local).AddTicks(1576),
                            Title = "Autem maiores qui velit."
                        },
                        new
                        {
                            Id = 29,
                            AuthorId = 9,
                            Body = "Qui et fugiat delectus.\nAccusamus a perferendis veniam eum impedit ut.\nTempora cumque optio voluptatem occaecati dolores eum.\nAd inventore laborum sint.\nQuisquam doloremque qui repellendus qui molestiae.\nUt magni quia.\nExercitationem ratione est dignissimos qui tempora praesentium architecto totam.\nIpsam id ratione est.\nCumque aut repellat et eos eius ducimus sunt voluptatem.\nMolestiae et nobis veniam laudantium libero aspernatur non recusandae ut.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 258, DateTimeKind.Local).AddTicks(1941),
                            Title = "Tenetur commodi quo quo."
                        },
                        new
                        {
                            Id = 30,
                            AuthorId = 4,
                            Body = "Ut ab sed voluptate molestiae odio explicabo.\nEst quasi ut ut enim.\nNulla illo ut sint sequi qui omnis.\nConsequatur unde eius architecto non quisquam rem aliquam et.\nIllum voluptatem soluta qui necessitatibus.\nQuas doloribus voluptate iure natus reprehenderit voluptas fugiat.\nReprehenderit consequuntur voluptatem voluptates.\nDeleniti voluptatem qui placeat quae expedita amet aliquid tempora.\nEum totam dignissimos sed ducimus.\nEos ducimus dolorem.",
                            TimeStamp = new DateTime(2022, 10, 14, 9, 36, 51, 258, DateTimeKind.Local).AddTicks(2336),
                            Title = "Ducimus eum harum quae."
                        });
                });

            modelBuilder.Entity("api.Model.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Model.BlogPost", b =>
                {
                    b.HasOne("api.Model.Author", "Author")
                        .WithMany("BlogPosts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("api.Model.RefreshToken", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Model.Author", b =>
                {
                    b.Navigation("BlogPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
